{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["/*\nThe MIT License (MIT)\n\nCopyright (c) 2014 Matteo Collina\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\n\n\nvar leven = require('leven')\n\nfunction commist () {\n  var commands = []\n\n  function lookup (array) {\n    if (typeof array === 'string') { array = array.split(' ') }\n\n    return commands.map(function (cmd) {\n      return cmd.match(array)\n    }).filter(function (match) {\n      return match.partsNotMatched === 0\n    }).sort(function (a, b) {\n      if (a.inputNotMatched > b.inputNotMatched) { return 1 }\n\n      if (a.inputNotMatched === b.inputNotMatched && a.totalDistance > b.totalDistance) { return 1 }\n\n      return -1\n    }).map(function (match) {\n      return match.cmd\n    })\n  }\n\n  function parse (args) {\n    var matching = lookup(args)\n\n    if (matching.length > 0) {\n      matching[0].call(args)\n\n      // return null if there is nothing left to do\n      return null\n    }\n\n    return args\n  }\n\n  function register (inputCommand, func) {\n    var commandOptions = {\n      command: inputCommand,\n      strict: false,\n      func: func\n    }\n\n    if (typeof inputCommand === 'object') {\n      commandOptions = Object.assign(commandOptions, inputCommand)\n    }\n\n    var matching = lookup(commandOptions.command)\n\n    matching.forEach(function (match) {\n      if (match.string === commandOptions.command) { throw new Error('command already registered: ' + commandOptions.command) }\n    })\n\n    commands.push(new Command(commandOptions))\n\n    return this\n  }\n\n  return {\n    register: register,\n    parse: parse,\n    lookup: lookup\n  }\n}\n\nfunction Command (options) {\n  this.string = options.command\n  this.strict = options.strict\n  this.parts = this.string.split(' ')\n  this.length = this.parts.length\n  this.func = options.func\n\n  this.parts.forEach(function (part) {\n    if (part.length < 3) { throw new Error('command words must be at least 3 chars: ' + options.command) }\n  })\n}\n\nCommand.prototype.call = function call (argv) {\n  this.func(argv.slice(this.length))\n}\n\nCommand.prototype.match = function match (string) {\n  return new CommandMatch(this, string)\n}\n\nfunction CommandMatch (cmd, array) {\n  this.cmd = cmd\n  this.distances = cmd.parts.map(function (elem, i) {\n    if (array[i] !== undefined) {\n      if (cmd.strict) {\n        return elem === array[i] ? 0 : undefined\n      } else {\n        return leven(elem, array[i])\n      }\n    } else { return undefined }\n  }).filter(function (distance, i) {\n    return distance !== undefined && distance < cmd.parts[i].length - 2\n  })\n\n  this.partsNotMatched = cmd.length - this.distances.length\n  this.inputNotMatched = array.length - this.distances.length\n  this.totalDistance = this.distances.reduce(function (acc, i) { return acc + i }, 0)\n}\n\nmodule.exports = commist\n"]}