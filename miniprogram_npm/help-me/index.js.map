{"version":3,"sources":["help-me.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nconst fs = require('fs')\nconst { PassThrough, pipeline } = require('readable-stream')\nconst glob = require('glob')\n\nconst defaults = {\n  ext: '.txt',\n  help: 'help'\n}\n\nfunction isDirectory (path) {\n  try {\n    const stat = fs.lstatSync(path)\n    return stat.isDirectory()\n  } catch (err) {\n    return false\n  }\n}\n\nfunction helpMe (opts) {\n  opts = Object.assign({}, defaults, opts)\n\n  if (!opts.dir) {\n    throw new Error('missing dir')\n  }\n\n  if (!isDirectory(opts.dir)) {\n    throw new Error(`${opts.dir} is not a directory`)\n  }\n\n  return {\n    createStream: createStream,\n    toStdout: toStdout\n  }\n\n  function createStream (args) {\n    if (typeof args === 'string') {\n      args = args.split(' ')\n    } else if (!args || args.length === 0) {\n      args = [opts.help]\n    }\n\n    const out = new PassThrough()\n    const re = new RegExp(args.map(function (arg) {\n      return arg + '[a-zA-Z0-9]*'\n    }).join('[ /]+'))\n\n    glob(opts.dir + '/**/*' + opts.ext, function (err, files) {\n      if (err) return out.emit('error', err)\n\n      files = files.map(function (path) {\n        const relative = path.replace(opts.dir, '').replace(/^\\//, '')\n        return { path, relative }\n      }).filter(function (file) {\n        return file.relative.match(re)\n      })\n\n      if (files.length === 0) {\n        return out.emit('error', new Error('no such help file'))\n      } else if (files.length > 1) {\n        const exactMatch = files.find((file) => file.relative === `${args[0]}${opts.ext}`)\n        if (!exactMatch) {\n          out.write('There are ' + files.length + ' help pages ')\n          out.write('that matches the given request, please disambiguate:\\n')\n          files.forEach(function (file) {\n            out.write('  * ')\n            out.write(file.relative.replace(opts.ext, ''))\n            out.write('\\n')\n          })\n          out.end()\n          return\n        }\n        files = [exactMatch]\n      }\n\n      pipeline(fs.createReadStream(files[0].path), out, () => {})\n    })\n\n    return out\n  }\n\n  function toStdout (args) {\n    createStream(args)\n      .on('error', function () {\n        console.log('no such help file\\n')\n        toStdout()\n      })\n      .pipe(process.stdout)\n  }\n}\n\nmodule.exports = helpMe\n"]}